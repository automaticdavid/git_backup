#!/usr/bin/python
# -*- coding: utf-8 -*-

# (c) 2017, Ansible by Red Hat, inc
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
#
import os

from ansible.module_utils.basic import AnsibleModule
from ansible.module_utils._text import to_text

DEFAULT_COMMIT_MSG = "Autogenerated commit message from Ansible"

def generate_message(files):

    msg = "Autogenerated commit message from Ansible\n\nThe following " \
          "configurations were updated in this commit:\n\n"

    for item in files:
        msg += "* %s" % item

    return msg


def main():
    """ main entry point for module execution
    """
    argument_spec = dict(
        repo=dict(type='path', required=True),
        pathspec=dict(default='*'),
        message=dict(),
        force=dict(type='bool')
    )

    module = AnsibleModule(argument_spec=argument_spec,
                           supports_check_mode=True)

    repo = module.params['repo']

    result = {'changed': False}

    if not os.path.exists(repo):
        module.fail_json(msg='repo %s does not exist' % repo)
    os.chdir(repo)

    rc, out, err = module.run_command('git status -s')

    if rc > 0:
        module.fail_json(msg=to_text(err))

    elif out:
        files = list()
        for item in out.split('\n'):
            if item:
                files.append(to_text(item[2:]).strip())
        result['files'] = files

    if result.get('files'):
        if not module.check_mode:
            module.run_command('git add %s' % module.params['pathspec'])

            message = module.params['message'] or generate_message(files)

            cmd = 'git commit -m"%s"' % message
            if module.params['force'] is True:
                cmd += ' --force'
            rc, out, err = module.run_command(cmd)

            if rc > 0:
                module.fail_json(msg=to_text(err.strip()))
        result['changed'] = True

    module.exit_json(**result)

if __name__ == '__main__':
    main()
